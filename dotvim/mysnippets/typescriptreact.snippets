extends javascript
extends javascriptreact

snippet props
type ReduxProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = ReturnType<typeof mapDispatchToProps>;
type Props = InputProps & ReduxProps & DispatchProps;
endsnippet

snippet us
const [${1:name}, set${1/.*/\u$0/}] = useState<${2:type}>(${3:default});
endsnippet

snippet usf
const [${1:name}, set${1/.*/\u$0/}] = useState(false);
endsnippet

snippet ci
import { connect } from 'react-redux';
import { AnyAction } from 'redux';
import { ThunkDispatch } from 'redux-thunk';
endsnippet

snippet mstp
const mapStateToProps = (state: any, ownProps: InputProps) => ({
});
endsnippet

snippet mdtp
const mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>, ownProps: InputProps) => ({
  actions: {
  },
});
endsnippet

snippet newf
import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import { AnyAction } from 'redux';
import { ThunkDispatch } from 'redux-thunk';

const mapStateToProps = (state: any, ownProps: InputProps) => ({
});

const mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>, ownProps: InputProps) => ({
  actions: {
  },
});

type InputProps = {
}

type ReduxProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = ReturnType<typeof mapDispatchToProps>;
type Props = InputProps & ReduxProps & DispatchProps;

export const ${1:Name} = connect(mapStateToProps, mapDispatchToProps)((props: Props) => {
  useEffect(() => {
  });

  return (
    <div>
    </div>
  );
});
endsnippet
